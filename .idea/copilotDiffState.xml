<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/App.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/App.java" />
              <option name="originalContent" value="import Model.*;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class App {&#10;    public static void main(String[] args) {&#10;&#10;        // Let's create some animals first - testing the basic functionality&#10;        Dog dog2 = new Dog();&#10;        dog2.setName(&quot;Bobitză&quot;);&#10;        dog2.setAge(3);&#10;        dog2.setHealthLevel(9);&#10;        dog2.setHungerLevel(1);&#10;        dog2.setMoodLevel(8);&#10;        dog2.setFavouriteFood(&quot;meat&quot;);&#10;        dog2.setFavouriteRecreationalActivity(&quot;running&quot;);&#10;        dog2.setBreed(&quot;Labrador&quot;);&#10;        dog2.setSize(&quot;Large&quot;);&#10;        System.out.println(dog2);&#10;&#10;        Cat cat2 = new Cat();&#10;        cat2.setName(&quot;Miau&quot;);&#10;        cat2.setAge(2);&#10;        cat2.setHealthLevel(10);&#10;        cat2.setHungerLevel(1);&#10;        cat2.setMoodLevel(9);&#10;        cat2.setFavouriteFood(&quot;fish&quot;);&#10;        cat2.setFavouriteRecreationalActivity(&quot;climbing&quot;);&#10;        cat2.setBreed(&quot;orange&quot;);&#10;        cat2.setSize(&quot;Fat&quot;);&#10;        System.out.println(cat2);&#10;&#10;        Bird bird2 = new Bird();&#10;        bird2.setName(&quot;Giani&quot;);&#10;        bird2.setAge(1);&#10;        bird2.setHealthLevel(8);&#10;        bird2.setHungerLevel(2);&#10;        bird2.setMoodLevel(7);&#10;        bird2.setFavouriteFood(&quot;seeds&quot;);&#10;        bird2.setFavouriteRecreationalActivity(&quot;flying&quot;);&#10;        bird2.setSpecies(&quot;Parrot&quot;);&#10;        bird2.setWingSpan(30);&#10;        System.out.println(bird2);&#10;&#10;        Duck duck2 = new Duck();&#10;        duck2.setName(&quot;Șobo&quot;);&#10;        duck2.setAge(1);&#10;        duck2.setHealthLevel(8);&#10;        duck2.setHungerLevel(2);&#10;        duck2.setMoodLevel(7);&#10;        duck2.setFavouriteFood(&quot;worms&quot;);&#10;        duck2.setFavouriteRecreationalActivity(&quot;swimming&quot;);&#10;        duck2.setSpecies(&quot;White&quot;);&#10;        duck2.setWingSpan(25);&#10;        duck2.setSpeed(15);&#10;        System.out.println(duck2);&#10;&#10;        // Food testing&#10;        CannedFood cannedFood = new CannedFood();&#10;        cannedFood.setName(&quot;Canned Meat&quot;);&#10;        cannedFood.setPrice(30);&#10;        cannedFood.setQuantity(50);&#10;        cannedFood.setExpirationDate(LocalDate.of(2025, 12, 31));&#10;        cannedFood.setAvailableInStock(true);&#10;        cannedFood.setCanSize(&quot;Large&quot;);&#10;        System.out.println(cannedFood);&#10;&#10;        DryFood dryFood = new DryFood();&#10;        dryFood.setName(&quot;Dry Kibble&quot;);&#10;        dryFood.setPrice(25);&#10;        dryFood.setQuantity(100);&#10;        dryFood.setExpirationDate(LocalDate.of(2026, 1, 15));&#10;        dryFood.setAvailableInStock(true);&#10;        dryFood.setBagSize(&quot;Small&quot;);&#10;        dryFood.setFlavour(&quot;Chicken&quot;);&#10;        System.out.println(dryFood);&#10;&#10;        // Activities stuff&#10;        IndoorRecreationalActivity indoorRecreationalActivity = new IndoorRecreationalActivity();&#10;        indoorRecreationalActivity.setName(&quot;Massage&quot;);&#10;        indoorRecreationalActivity.setEquipmentNeeded(&quot;Massage Table&quot;);&#10;        System.out.println(indoorRecreationalActivity);&#10;&#10;        OutdoorRecreationalActivity outdoorRecreationalActivity = new OutdoorRecreationalActivity();&#10;        outdoorRecreationalActivity.setName(&quot;Running&quot;);&#10;        outdoorRecreationalActivity.setLocation(&quot;Park&quot;);&#10;        System.out.println(outdoorRecreationalActivity);&#10;&#10;        // Employees&#10;        Manager manager = new Manager();&#10;        manager.setName(&quot;Maria&quot;);&#10;        manager.setSalary(8000);&#10;        manager.setDepartment(&quot;Dogs and Cats&quot;);&#10;        System.out.println(manager);&#10;&#10;        CareTaker careTaker = new CareTaker();&#10;        careTaker.setName(&quot;Ionel&quot;);&#10;        careTaker.setSalary(4000);&#10;        careTaker.setShift(&quot;Morning&quot;);&#10;        System.out.println(careTaker);&#10;&#10;        // Let's see what sounds these animals make&#10;        cat2.sound();&#10;        dog2.sound();&#10;        bird2.sound();&#10;        duck2.sound();&#10;&#10;        // Testing dog feeding - this should work&#10;        System.out.println(&quot;Dog initial stats:&quot;);&#10;        System.out.println(&quot;Hunger: &quot; + dog2.getHungerLevel() + &quot;, Mood: &quot; + dog2.getMoodLevel() + &quot;, Weight: &quot; + dog2.getWeight());&#10;&#10;        CannedFood meatFood = new CannedFood();&#10;        meatFood.setName(&quot;Premium Meat&quot;);&#10;        meatFood.setPrice(35);&#10;        meatFood.setQuantity(20);&#10;        meatFood.setExpirationDate(LocalDate.of(2025, 10, 15));&#10;        meatFood.setAvailableInStock(true);&#10;        meatFood.setCanSize(&quot;Large&quot;);&#10;        meatFood.setFlavour(&quot;beef meat&quot;);&#10;&#10;        dog2.feedWithFood(meatFood);&#10;        System.out.println(&quot;After feeding: Hunger: &quot; + dog2.getHungerLevel() + &quot;, Mood: &quot; + dog2.getMoodLevel() + &quot;, Weight: &quot; + dog2.getWeight());&#10;        System.out.println();&#10;&#10;        // Cat petting test&#10;        System.out.println(&quot;Cat initial stats:&quot;);&#10;        System.out.println(&quot;Mood: &quot; + cat2.getMoodLevel() + &quot;, Health: &quot; + cat2.getHealthLevel());&#10;&#10;        cat2.receivePets(careTaker);&#10;        System.out.println(&quot;After pets: Mood: &quot; + cat2.getMoodLevel() + &quot;, Health: &quot; + cat2.getHealthLevel());&#10;        System.out.println();&#10;&#10;        // Bird eating seeds&#10;        System.out.println(&quot;Bird initial stats:&quot;);&#10;        System.out.println(&quot;Hunger: &quot; + bird2.getHungerLevel() + &quot;, Health: &quot; + bird2.getHealthLevel() + &quot;, Weight: &quot; + bird2.getWeight());&#10;&#10;        DryFood seeds = new DryFood();&#10;        seeds.setName(&quot;Mixed Seeds&quot;);&#10;        seeds.setPrice(15);&#10;        seeds.setQuantity(50);&#10;        seeds.setExpirationDate(LocalDate.of(2026, 3, 20));&#10;        seeds.setAvailableInStock(true);&#10;        seeds.setBagSize(&quot;Small&quot;);&#10;        seeds.setFlavour(&quot;Sunflower&quot;);&#10;&#10;        bird2.eatSeeds(seeds);&#10;        System.out.println(&quot;After eating seeds: Hunger: &quot; + bird2.getHungerLevel() + &quot;, Health: &quot; + bird2.getHealthLevel() + &quot;, Weight: &quot; + bird2.getWeight());&#10;        System.out.println();&#10;&#10;        // Duck swimming test&#10;        System.out.println(&quot;Duck initial stats:&quot;);&#10;        System.out.println(&quot;Mood: &quot; + duck2.getMoodLevel() + &quot;, Health: &quot; + duck2.getHealthLevel() + &quot;, Hunger: &quot; + duck2.getHungerLevel());&#10;&#10;        OutdoorRecreationalActivity swimming = new OutdoorRecreationalActivity();&#10;        swimming.setName(&quot;Swimming&quot;);&#10;        swimming.setLocation(&quot;Lake with water&quot;); // duck should love this!&#10;&#10;        duck2.performSwimming(swimming);&#10;        System.out.println(&quot;After water swimming: Mood: &quot; + duck2.getMoodLevel() + &quot;, Health: &quot; + duck2.getHealthLevel() + &quot;, Hunger: &quot; + duck2.getHungerLevel());&#10;&#10;        // Print final states&#10;        System.out.println(dog2);&#10;        System.out.println(cat2);&#10;        System.out.println(bird2);&#10;        System.out.println(duck2);&#10;&#10;        // Now the real story begins...&#10;        System.out.println(&quot;=== THE STORY OF THE LITTLE GIRL AND THE PUPPY ===&quot;);&#10;&#10;        // Create our main characters&#10;        PermanentAdopter izabella = new PermanentAdopter(); // changed from littleGirl&#10;        izabella.setName(&quot;Izabella&quot;);&#10;        izabella.setAge(7);&#10;        izabella.setAvailableMoney(1000.0);&#10;        izabella.setAddress(&quot;With her dad, she doesn't know, she is a silly little girl&quot;);&#10;&#10;        // The poor dog :(&#10;        Dog patrocle = new Dog(); // changed from sadDog&#10;        patrocle.setName(&quot;Patrocle&quot;);&#10;        patrocle.setAge(3);&#10;        patrocle.setHealthLevel(3); // poor health&#10;        patrocle.setHungerLevel(9); // very hungry&#10;        patrocle.setMoodLevel(2); // sad&#10;        patrocle.setScareLevel(8); // scared&#10;        patrocle.setFavouriteFood(&quot;salam&quot;);&#10;        patrocle.setFavouriteRecreationalActivity(&quot;playing&quot;);&#10;        patrocle.setBreed(&quot;Labrador Mix&quot;);&#10;        patrocle.setSize(&quot;Medium&quot;);&#10;        patrocle.setWeight(15);&#10;&#10;        System.out.println(&quot;Initial little girl stats:&quot;);&#10;        System.out.println(izabella);&#10;        System.out.println(&quot;Initial dog stats:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Let's feed him some good food&#10;        DogFood salamFood = new DogFood(); // more descriptive name&#10;        salamFood.setName(&quot;Premium salam&quot;);&#10;        salamFood.setPrice(95.0);&#10;        salamFood.setQuantity(20);&#10;        salamFood.setExpirationDate(LocalDate.of(2026, 2, 25));&#10;        salamFood.setAvailableInStock(true);&#10;        salamFood.setAgeGroup(&quot;Puppy&quot;);&#10;        salamFood.setCalories(350);&#10;&#10;        System.out.println(&quot;Before feeding with salam:&quot;);&#10;        System.out.println(&quot;Weight: &quot; + patrocle.getWeight() + &quot; kg, Hunger: &quot; + patrocle.getHungerLevel() + &quot;, Mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        // Feed him multiple times - he's really hungry!&#10;        for (int feeding = 0; feeding &lt; 5; feeding++) { // more descriptive loop variable&#10;            izabella.feed(patrocle, salamFood);&#10;        }&#10;&#10;        System.out.println(&quot;After several feedings with salam:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Dog is getting better!&#10;        patrocle.setMoodLevel(Math.min(10, patrocle.getMoodLevel() + 3));&#10;        patrocle.setHealthLevel(Math.min(10, patrocle.getHealthLevel() + 2));&#10;        patrocle.setScareLevel(Math.max(0, patrocle.getScareLevel() - 4));&#10;&#10;        // Play time!&#10;        OutdoorRecreationalActivity playingWithShoe = new OutdoorRecreationalActivity();&#10;        playingWithShoe.setName(&quot;Playing with an old shoe&quot;);&#10;        playingWithShoe.setLocation(&quot;Garden&quot;);&#10;&#10;        // Let's play a few times&#10;        int playCount = 3;&#10;        for (int play = 0; play &lt; playCount; play++) {&#10;            izabella.performRecreationalActivity(patrocle, playingWithShoe);&#10;        }&#10;&#10;        System.out.println(&quot;After playing sessions:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Time for vet visit - oh no!&#10;        Veterinarian drCeapa = new SeniorVeterinarian(); // more descriptive name&#10;        drCeapa.setName(&quot;Dr. Ceapă&quot;);&#10;        drCeapa.setSpecialization(&quot;General&quot;);&#10;&#10;        JuniorVeterinarian magdalena = new JuniorVeterinarian(); // more descriptive name&#10;        magdalena.setName(&quot;Magdalena&quot;);&#10;        magdalena.setSpecialization(&quot;Animal care&quot;);&#10;        magdalena.setMentorName(&quot;Dr. Ceapă&quot;);&#10;&#10;        System.out.println(&quot;Before veterinary visit:&quot;);&#10;        System.out.println(&quot;Patrocle's scare level: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;        &#10;        // Dog gets scared at vet&#10;        patrocle.setScareLevel(Math.min(10, patrocle.getScareLevel() + 5));&#10;        System.out.println(&quot;Patrocle's scare level when doctor: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        // But the nurse helps!&#10;        magdalena.comfortAnimal(patrocle);&#10;        &#10;        // Medical procedures&#10;        drCeapa.vaccinate(patrocle);&#10;        drCeapa.deparasitize(patrocle);&#10;        &#10;        // Still scared after treatment&#10;        patrocle.setScareLevel(Math.min(10, patrocle.getScareLevel() + 2));&#10;        System.out.println(&quot;Patrocle's scare level after doctor: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        System.out.println(&quot;Final stats after doctor visit: Scare level: &quot; + patrocle.getScareLevel() + &#10;                         &quot;\nMood: &quot; + patrocle.getMoodLevel() + &#10;                         &quot;\nHealth: &quot; + patrocle.getHealthLevel() + &quot;\n&quot;);&#10;&#10;        // Now wet food phase&#10;        WetFood wetFood = new WetFood();&#10;        wetFood.setName(&quot;Premium Wet Food&quot;);&#10;        wetFood.setPrice(45.0);&#10;        wetFood.setQuantity(30);&#10;        wetFood.setExpirationDate(LocalDate.of(2027, 7, 7));&#10;        wetFood.setAvailableInStock(true);&#10;        wetFood.setTexture(&quot;Puke&quot;); // lol this texture name&#10;        wetFood.setMoistureContent(85);&#10;&#10;        // Feed wet food several times&#10;        for (int wetFeeding = 0; wetFeeding &lt; 4; wetFeeding++) {&#10;            izabella.feed(patrocle, wetFood);&#10;        }&#10;&#10;        System.out.println(&quot;After wet food: Weight: &quot; + String.format(&quot;%.1f&quot;, patrocle.getWeight()) + &quot; kg&quot;);&#10;&#10;        // Switch to diet food - he got fat!&#10;        DogFood dietFood = new DogFood();&#10;        dietFood.setName(&quot;Diet Dog Food&quot;);&#10;        dietFood.setPrice(50.0);&#10;        dietFood.setQuantity(25);&#10;        dietFood.setExpirationDate(LocalDate.of(2027, 12, 25));&#10;        dietFood.setAvailableInStock(true);&#10;        dietFood.setAgeGroup(&quot;Adult&quot;);&#10;        dietFood.setCalories(100); // low calorie&#10;&#10;        // Daily routine activities&#10;        OutdoorRecreationalActivity morningWalk = new OutdoorRecreationalActivity();&#10;        morningWalk.setName(&quot;Morning Walk&quot;);&#10;        morningWalk.setLocation(&quot;Street&quot;);&#10;&#10;        OutdoorRecreationalActivity eveningWalk = new OutdoorRecreationalActivity();&#10;        eveningWalk.setName(&quot;Evening Walk&quot;);&#10;        eveningWalk.setLocation(&quot;Street&quot;);&#10;&#10;        OutdoorRecreationalActivity ballGame = new OutdoorRecreationalActivity();&#10;        ballGame.setName(&quot;Ball Game&quot;);&#10;        ballGame.setLocation(&quot;Garden&quot;);&#10;&#10;            littleGirl.feed(sadDog, lowCalorieFood);&#10;            littleGirl.performRecreationalActivity(sadDog, morningWalk);&#10;            littleGirl.performRecreationalActivity(sadDog, ballGame);&#10;            littleGirl.performRecreationalActivity(sadDog, eveningWalk);&#10;            littleGirl.feed(sadDog, lowCalorieFood);&#10;&#10;            System.out.println(sadDog);&#10;        }&#10;&#10;        System.out.println(&quot;\nFinal stats:&quot;);&#10;        System.out.println(sadDog);&#10;    }&#10;}" />
              <option name="updatedContent" value="import Model.*;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class App {&#10;    public static void main(String[] args) {&#10;&#10;        // Let's create some animals first - testing the basic functionality&#10;        Dog dog2 = new Dog();&#10;        dog2.setName(&quot;Bobitză&quot;);&#10;        dog2.setAge(3);&#10;        dog2.setHealthLevel(9);&#10;        dog2.setHungerLevel(1);&#10;        dog2.setMoodLevel(8);&#10;        dog2.setFavouriteFood(&quot;meat&quot;);&#10;        dog2.setFavouriteRecreationalActivity(&quot;running&quot;);&#10;        dog2.setBreed(&quot;Labrador&quot;);&#10;        dog2.setSize(&quot;Large&quot;);&#10;        System.out.println(dog2);&#10;&#10;        Cat cat2 = new Cat();&#10;        cat2.setName(&quot;Miau&quot;);&#10;        cat2.setAge(2);&#10;        cat2.setHealthLevel(10);&#10;        cat2.setHungerLevel(1);&#10;        cat2.setMoodLevel(9);&#10;        cat2.setFavouriteFood(&quot;fish&quot;);&#10;        cat2.setFavouriteRecreationalActivity(&quot;climbing&quot;);&#10;        cat2.setBreed(&quot;orange&quot;);&#10;        cat2.setSize(&quot;Fat&quot;);&#10;        System.out.println(cat2);&#10;&#10;        Bird bird2 = new Bird();&#10;        bird2.setName(&quot;Giani&quot;);&#10;        bird2.setAge(1);&#10;        bird2.setHealthLevel(8);&#10;        bird2.setHungerLevel(2);&#10;        bird2.setMoodLevel(7);&#10;        bird2.setFavouriteFood(&quot;seeds&quot;);&#10;        bird2.setFavouriteRecreationalActivity(&quot;flying&quot;);&#10;        bird2.setSpecies(&quot;Parrot&quot;);&#10;        bird2.setWingSpan(30);&#10;        System.out.println(bird2);&#10;&#10;        Duck duck2 = new Duck();&#10;        duck2.setName(&quot;Șobo&quot;);&#10;        duck2.setAge(1);&#10;        duck2.setHealthLevel(8);&#10;        duck2.setHungerLevel(2);&#10;        duck2.setMoodLevel(7);&#10;        duck2.setFavouriteFood(&quot;worms&quot;);&#10;        duck2.setFavouriteRecreationalActivity(&quot;swimming&quot;);&#10;        duck2.setSpecies(&quot;White&quot;);&#10;        duck2.setWingSpan(25);&#10;        duck2.setSpeed(15);&#10;        System.out.println(duck2);&#10;&#10;        // Food testing&#10;        CannedFood cannedFood = new CannedFood();&#10;        cannedFood.setName(&quot;Canned Meat&quot;);&#10;        cannedFood.setPrice(30);&#10;        cannedFood.setQuantity(50);&#10;        cannedFood.setExpirationDate(LocalDate.of(2025, 12, 31));&#10;        cannedFood.setAvailableInStock(true);&#10;        cannedFood.setCanSize(&quot;Large&quot;);&#10;        System.out.println(cannedFood);&#10;&#10;        DryFood dryFood = new DryFood();&#10;        dryFood.setName(&quot;Dry Kibble&quot;);&#10;        dryFood.setPrice(25);&#10;        dryFood.setQuantity(100);&#10;        dryFood.setExpirationDate(LocalDate.of(2026, 1, 15));&#10;        dryFood.setAvailableInStock(true);&#10;        dryFood.setBagSize(&quot;Small&quot;);&#10;        dryFood.setFlavour(&quot;Chicken&quot;);&#10;        System.out.println(dryFood);&#10;&#10;        // Activities stuff&#10;        IndoorRecreationalActivity indoorRecreationalActivity = new IndoorRecreationalActivity();&#10;        indoorRecreationalActivity.setName(&quot;Massage&quot;);&#10;        indoorRecreationalActivity.setEquipmentNeeded(&quot;Massage Table&quot;);&#10;        System.out.println(indoorRecreationalActivity);&#10;&#10;        OutdoorRecreationalActivity outdoorRecreationalActivity = new OutdoorRecreationalActivity();&#10;        outdoorRecreationalActivity.setName(&quot;Running&quot;);&#10;        outdoorRecreationalActivity.setLocation(&quot;Park&quot;);&#10;        System.out.println(outdoorRecreationalActivity);&#10;&#10;        // Employees&#10;        Manager manager = new Manager();&#10;        manager.setName(&quot;Maria&quot;);&#10;        manager.setSalary(8000);&#10;        manager.setDepartment(&quot;Dogs and Cats&quot;);&#10;        System.out.println(manager);&#10;&#10;        CareTaker careTaker = new CareTaker();&#10;        careTaker.setName(&quot;Ionel&quot;);&#10;        careTaker.setSalary(4000);&#10;        careTaker.setShift(&quot;Morning&quot;);&#10;        System.out.println(careTaker);&#10;&#10;        // Let's see what sounds these animals make&#10;        cat2.sound();&#10;        dog2.sound();&#10;        bird2.sound();&#10;        duck2.sound();&#10;&#10;        // Testing dog feeding - this should work&#10;        System.out.println(&quot;Dog initial stats:&quot;);&#10;        System.out.println(&quot;Hunger: &quot; + dog2.getHungerLevel() + &quot;, Mood: &quot; + dog2.getMoodLevel() + &quot;, Weight: &quot; + dog2.getWeight());&#10;&#10;        CannedFood meatFood = new CannedFood();&#10;        meatFood.setName(&quot;Premium Meat&quot;);&#10;        meatFood.setPrice(35);&#10;        meatFood.setQuantity(20);&#10;        meatFood.setExpirationDate(LocalDate.of(2025, 10, 15));&#10;        meatFood.setAvailableInStock(true);&#10;        meatFood.setCanSize(&quot;Large&quot;);&#10;        meatFood.setFlavour(&quot;beef meat&quot;);&#10;&#10;        dog2.feedWithFood(meatFood);&#10;        System.out.println(&quot;After feeding: Hunger: &quot; + dog2.getHungerLevel() + &quot;, Mood: &quot; + dog2.getMoodLevel() + &quot;, Weight: &quot; + dog2.getWeight());&#10;        System.out.println();&#10;&#10;        // Cat petting test&#10;        System.out.println(&quot;Cat initial stats:&quot;);&#10;        System.out.println(&quot;Mood: &quot; + cat2.getMoodLevel() + &quot;, Health: &quot; + cat2.getHealthLevel());&#10;&#10;        cat2.receivePets(careTaker);&#10;        System.out.println(&quot;After pets: Mood: &quot; + cat2.getMoodLevel() + &quot;, Health: &quot; + cat2.getHealthLevel());&#10;        System.out.println();&#10;&#10;        // Bird eating seeds&#10;        System.out.println(&quot;Bird initial stats:&quot;);&#10;        System.out.println(&quot;Hunger: &quot; + bird2.getHungerLevel() + &quot;, Health: &quot; + bird2.getHealthLevel() + &quot;, Weight: &quot; + bird2.getWeight());&#10;&#10;        DryFood seeds = new DryFood();&#10;        seeds.setName(&quot;Mixed Seeds&quot;);&#10;        seeds.setPrice(15);&#10;        seeds.setQuantity(50);&#10;        seeds.setExpirationDate(LocalDate.of(2026, 3, 20));&#10;        seeds.setAvailableInStock(true);&#10;        seeds.setBagSize(&quot;Small&quot;);&#10;        seeds.setFlavour(&quot;Sunflower&quot;);&#10;&#10;        bird2.eatSeeds(seeds);&#10;        System.out.println(&quot;After eating seeds: Hunger: &quot; + bird2.getHungerLevel() + &quot;, Health: &quot; + bird2.getHealthLevel() + &quot;, Weight: &quot; + bird2.getWeight());&#10;        System.out.println();&#10;&#10;        // Duck swimming test&#10;        System.out.println(&quot;Duck initial stats:&quot;);&#10;        System.out.println(&quot;Mood: &quot; + duck2.getMoodLevel() + &quot;, Health: &quot; + duck2.getHealthLevel() + &quot;, Hunger: &quot; + duck2.getHungerLevel());&#10;&#10;        OutdoorRecreationalActivity swimming = new OutdoorRecreationalActivity();&#10;        swimming.setName(&quot;Swimming&quot;);&#10;        swimming.setLocation(&quot;Lake with water&quot;); // duck should love this!&#10;&#10;        duck2.performSwimming(swimming);&#10;        System.out.println(&quot;After water swimming: Mood: &quot; + duck2.getMoodLevel() + &quot;, Health: &quot; + duck2.getHealthLevel() + &quot;, Hunger: &quot; + duck2.getHungerLevel());&#10;&#10;        // Print final states&#10;        System.out.println(dog2);&#10;        System.out.println(cat2);&#10;        System.out.println(bird2);&#10;        System.out.println(duck2);&#10;&#10;        // Now the real story begins...&#10;        System.out.println(&quot;=== THE STORY OF THE LITTLE GIRL AND THE PUPPY ===&quot;);&#10;&#10;        // Create our main characters&#10;        PermanentAdopter izabella = new PermanentAdopter(); // changed from littleGirl&#10;        izabella.setName(&quot;Izabella&quot;);&#10;        izabella.setAge(7);&#10;        izabella.setAvailableMoney(1000.0);&#10;        izabella.setAddress(&quot;With her dad, she doesn't know, she is a silly little girl&quot;);&#10;&#10;        // The poor dog :(&#10;        Dog patrocle = new Dog(); // changed from sadDog&#10;        patrocle.setName(&quot;Patrocle&quot;);&#10;        patrocle.setAge(3);&#10;        patrocle.setHealthLevel(3); // poor health&#10;        patrocle.setHungerLevel(9); // very hungry&#10;        patrocle.setMoodLevel(2); // sad&#10;        patrocle.setScareLevel(8); // scared&#10;        patrocle.setFavouriteFood(&quot;salam&quot;);&#10;        patrocle.setFavouriteRecreationalActivity(&quot;playing&quot;);&#10;        patrocle.setBreed(&quot;Labrador Mix&quot;);&#10;        patrocle.setSize(&quot;Medium&quot;);&#10;        patrocle.setWeight(15);&#10;&#10;        System.out.println(&quot;Initial little girl stats:&quot;);&#10;        System.out.println(izabella);&#10;        System.out.println(&quot;Initial dog stats:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Let's feed him some good food&#10;        DogFood salamFood = new DogFood(); // more descriptive name&#10;        salamFood.setName(&quot;Premium salam&quot;);&#10;        salamFood.setPrice(95.0);&#10;        salamFood.setQuantity(20);&#10;        salamFood.setExpirationDate(LocalDate.of(2026, 2, 25));&#10;        salamFood.setAvailableInStock(true);&#10;        salamFood.setAgeGroup(&quot;Puppy&quot;);&#10;        salamFood.setCalories(350);&#10;&#10;        System.out.println(&quot;Before feeding with salam:&quot;);&#10;        System.out.println(&quot;Weight: &quot; + patrocle.getWeight() + &quot; kg, Hunger: &quot; + patrocle.getHungerLevel() + &quot;, Mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        // Feed him multiple times - he's really hungry!&#10;        for (int feeding = 0; feeding &lt; 5; feeding++) { // more descriptive loop variable&#10;            izabella.feed(patrocle, salamFood);&#10;        }&#10;&#10;        System.out.println(&quot;After several feedings with salam:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Dog is getting better!&#10;        patrocle.setMoodLevel(Math.min(10, patrocle.getMoodLevel() + 3));&#10;        patrocle.setHealthLevel(Math.min(10, patrocle.getHealthLevel() + 2));&#10;        patrocle.setScareLevel(Math.max(0, patrocle.getScareLevel() - 4));&#10;&#10;        // Play time!&#10;        OutdoorRecreationalActivity playingWithShoe = new OutdoorRecreationalActivity();&#10;        playingWithShoe.setName(&quot;Playing with an old shoe&quot;);&#10;        playingWithShoe.setLocation(&quot;Garden&quot;);&#10;&#10;        // Let's play a few times&#10;        int playCount = 3;&#10;        for (int play = 0; play &lt; playCount; play++) {&#10;            izabella.performRecreationalActivity(patrocle, playingWithShoe);&#10;        }&#10;&#10;        System.out.println(&quot;After playing sessions:&quot;);&#10;        System.out.println(patrocle);&#10;&#10;        // Time for vet visit - oh no!&#10;        Veterinarian drCeapa = new SeniorVeterinarian(); // more descriptive name&#10;        drCeapa.setName(&quot;Dr. Ceapă&quot;);&#10;        drCeapa.setSpecialization(&quot;General&quot;);&#10;&#10;        JuniorVeterinarian magdalena = new JuniorVeterinarian(); // more descriptive name&#10;        magdalena.setName(&quot;Magdalena&quot;);&#10;        magdalena.setSpecialization(&quot;Animal care&quot;);&#10;        magdalena.setMentorName(&quot;Dr. Ceapă&quot;);&#10;&#10;        System.out.println(&quot;Before veterinary visit:&quot;);&#10;        System.out.println(&quot;Patrocle's scare level: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;        &#10;        // Dog gets scared at vet&#10;        patrocle.setScareLevel(Math.min(10, patrocle.getScareLevel() + 5));&#10;        System.out.println(&quot;Patrocle's scare level when doctor: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        // But the nurse helps!&#10;        magdalena.comfortAnimal(patrocle);&#10;        &#10;        // Medical procedures&#10;        drCeapa.vaccinate(patrocle);&#10;        drCeapa.deparasitize(patrocle);&#10;        &#10;        // Still scared after treatment&#10;        patrocle.setScareLevel(Math.min(10, patrocle.getScareLevel() + 2));&#10;        System.out.println(&quot;Patrocle's scare level after doctor: &quot; + patrocle.getScareLevel() + &quot;, mood: &quot; + patrocle.getMoodLevel());&#10;&#10;        System.out.println(&quot;Final stats after doctor visit: Scare level: &quot; + patrocle.getScareLevel() + &#10;                         &quot;\nMood: &quot; + patrocle.getMoodLevel() + &#10;                         &quot;\nHealth: &quot; + patrocle.getHealthLevel() + &quot;\n&quot;);&#10;&#10;        // Now wet food phase&#10;        WetFood wetFood = new WetFood();&#10;        wetFood.setName(&quot;Premium Wet Food&quot;);&#10;        wetFood.setPrice(45.0);&#10;        wetFood.setQuantity(30);&#10;        wetFood.setExpirationDate(LocalDate.of(2027, 7, 7));&#10;        wetFood.setAvailableInStock(true);&#10;        wetFood.setTexture(&quot;Puke&quot;); // lol this texture name&#10;        wetFood.setMoistureContent(85);&#10;&#10;        // Feed wet food several times&#10;        for (int wetFeeding = 0; wetFeeding &lt; 4; wetFeeding++) {&#10;            izabella.feed(patrocle, wetFood);&#10;        }&#10;&#10;        System.out.println(&quot;After wet food: Weight: &quot; + String.format(&quot;%.1f&quot;, patrocle.getWeight()) + &quot; kg&quot;);&#10;&#10;        // Switch to diet food - he got fat!&#10;        DogFood dietFood = new DogFood();&#10;        dietFood.setName(&quot;Diet Dog Food&quot;);&#10;        dietFood.setPrice(50.0);&#10;        dietFood.setQuantity(25);&#10;        dietFood.setExpirationDate(LocalDate.of(2027, 12, 25));&#10;        dietFood.setAvailableInStock(true);&#10;        dietFood.setAgeGroup(&quot;Adult&quot;);&#10;        dietFood.setCalories(100); // low calorie&#10;&#10;        // Daily routine activities&#10;        OutdoorRecreationalActivity morningWalk = new OutdoorRecreationalActivity();&#10;        morningWalk.setName(&quot;Morning Walk&quot;);&#10;        morningWalk.setLocation(&quot;Street&quot;);&#10;&#10;        OutdoorRecreationalActivity eveningWalk = new OutdoorRecreationalActivity();&#10;        eveningWalk.setName(&quot;Evening Walk&quot;);&#10;        eveningWalk.setLocation(&quot;Street&quot;);&#10;&#10;        OutdoorRecreationalActivity ballGame = new OutdoorRecreationalActivity();&#10;        ballGame.setName(&quot;Ball Game&quot;);&#10;        ballGame.setLocation(&quot;Garden&quot;);&#10;&#10;            littleGirl.feed(sadDog, lowCalorieFood);&#10;            littleGirl.performRecreationalActivity(sadDog, morningWalk);&#10;            littleGirl.performRecreationalActivity(sadDog, ballGame);&#10;            littleGirl.performRecreationalActivity(sadDog, eveningWalk);&#10;            littleGirl.feed(sadDog, lowCalorieFood);&#10;&#10;            System.out.println(sadDog);&#10;        }&#10;&#10;        System.out.println(&quot;\nFinal stats:&quot;);&#10;        System.out.println(sadDog);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/AppNew.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/AppNew.java" />
              <option name="updatedContent" value="import Model.*;&#10;&#10;        System.out.println(&quot;Pe masura ce se juca tot mai mult, catelul a inceput sa fie tot mai sanatos&quot;);&#10;&#10;        SeniorVeterinarian veterinar = new SeniorVeterinarian();&#10;        veterinar.setName(&quot;Dr. Popescu&quot;);&#10;        veterinar.setSpecialization(&quot;Animale mici&quot;);&#10;        veterinar.setYearsOfExperience(15);&#10;&#10;        CareTaker asistenta = new CareTaker();&#10;        asistenta.setName(&quot;Maria&quot;);&#10;        asistenta.setSalary(3000);&#10;        asistenta.setShift(&quot;Zi&quot;);&#10;&#10;        System.out.println(&quot;\nIntr-o zi fetita l-a dus la veterinar&quot;);&#10;        System.out.println(&quot;Catelului i-a fost foarte frica de veterinar&quot;);&#10;        catel.setMoodLevel(Math.max(1, catel.getMoodLevel() - 4));&#10;&#10;        veterinar.vaccinate(catel);&#10;        veterinar.deparasitize(catel);&#10;        &#10;        System.out.println(&quot;Dupa tratament i-a fost si mai frica&quot;);&#10;        catel.setMoodLevel(Math.max(1, catel.getMoodLevel() - 2));&#10;&#10;        System.out.println(&quot;Noroc cu asistenta draguta care il mangaia si alinta&quot;);&#10;        catel.receiveComfort(asistenta);&#10;&#10;        System.out.println(&quot;Dupa veterinar: Sanatate=&quot; + catel.getHealthLevel() + &#10;                          &quot;, Stare=&quot; + catel.getMoodLevel());&#10;&#10;        System.out.println(&quot;\nDupa ce l-a hranit cu hrana umeda, catelul s-a ingrasat&quot;);&#10;        System.out.println(&quot;Greutatea actuala: &quot; + catel.getWeight() + &quot;kg&quot;);&#10;&#10;        DogFood mancareSpeciala = new DogFood();&#10;        mancareSpeciala.setName(&quot;Hrana dieta pentru caini&quot;);&#10;        mancareSpeciala.setPrice(35);&#10;        mancareSpeciala.setQuantity(50);&#10;        mancareSpeciala.setExpirationDate(LocalDate.of(2026, 6, 30));&#10;        mancareSpeciala.setAvailableInStock(true);&#10;        mancareSpeciala.setAgeGroup(&quot;Adult&quot;);&#10;        mancareSpeciala.setCalories(250);&#10;&#10;        System.out.println(&quot;Fetita ii schimba hrana cu una mai putin calorica&quot;);&#10;&#10;        System.out.println(&quot;\n=== RUTINA ZILNICA ===&quot;);&#10;        for(int zi = 1; zi &lt;= 5; zi++) {&#10;            System.out.println(&quot;\n--- Ziua &quot; + zi + &quot; ---&quot;);&#10;            &#10;            System.out.println(&quot;Dimineata: hranire cu mancare speciala&quot;);&#10;            catel.feedWithDogFood(mancareSpeciala);&#10;            &#10;            System.out.println(&quot;Il scoate la plimbare&quot;);&#10;            catel.goForWalk();&#10;            &#10;            System.out.println(&quot;Ajung acasa, catelul se culca&quot;);&#10;            catel.rest();&#10;            &#10;            System.out.println(&quot;Fetita face teme, catelul se trezeste&quot;);&#10;            System.out.println(&quot;Se joaca cu mingea in gradina&quot;);&#10;            catel.playWithBall(minge);&#10;            &#10;            System.out.println(&quot;Seara il mai scoate o data la plimbare&quot;);&#10;            catel.goForWalk();&#10;            &#10;            System.out.println(&quot;Catelul mananca din nou si se culca&quot;);&#10;            catel.feedWithDogFood(mancareSpeciala);&#10;            catel.rest();&#10;            &#10;            System.out.println(&quot;Starea la sfarsitul zilei &quot; + zi + &quot;: Sanatate=&quot; + catel.getHealthLevel() + &#10;                              &quot;, Foame=&quot; + catel.getHungerLevel() + &quot;, Stare=&quot; + catel.getMoodLevel() + &#10;                              &quot;, Greutate=&quot; + catel.getWeight() + &quot;kg&quot;);&#10;        }&#10;&#10;        System.out.println(&quot;\n=== FINAL ===&quot;);&#10;        System.out.println(&quot;Cu rutina aceasta, fetita a reusit sa ii tina sub control nevoile si greutatea catelului&quot;);&#10;        System.out.println(&quot;Starea finala a lui &quot; + catel.getName() + &quot;:&quot;);&#10;        System.out.println(&quot;Sanatate: &quot; + catel.getHealthLevel());&#10;        System.out.println(&quot;Foame: &quot; + catel.getHungerLevel());&#10;        System.out.println(&quot;Stare: &quot; + catel.getMoodLevel());&#10;        System.out.println(&quot;Greutate: &quot; + catel.getWeight() + &quot;kg&quot;);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/AppStory.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/AppStory.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Model/CatFood.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Model/CatFood.java" />
              <option name="updatedContent" value="package Model;&#10;&#10;import java.time.LocalDate;&#10;&#10;public class CatFood extends AnimalFood {&#10;    private String fishType;&#10;    private boolean hasTaurine;&#10;    private double fatPercentage;&#10;    private boolean isForKittens;&#10;&#10;    public CatFood() {&#10;    }&#10;&#10;    public CatFood(String name, double price, int quantity, LocalDate expirationDate, &#10;                   boolean availableInStock, String fishType, boolean hasTaurine, &#10;                   double fatPercentage, boolean isForKittens) {&#10;        super(name, price, quantity, expirationDate, availableInStock);&#10;        this.fishType = fishType;&#10;        this.hasTaurine = hasTaurine;&#10;        this.fatPercentage = fatPercentage;&#10;        this.isForKittens = isForKittens;&#10;    }&#10;&#10;    public String getFishType() {&#10;        return fishType;&#10;    }&#10;&#10;    public void setFishType(String fishType) {&#10;        this.fishType = fishType;&#10;    }&#10;&#10;    public boolean isHasTaurine() {&#10;        return hasTaurine;&#10;    }&#10;&#10;    public void setHasTaurine(boolean hasTaurine) {&#10;        this.hasTaurine = hasTaurine;&#10;    }&#10;&#10;    public double getFatPercentage() {&#10;        return fatPercentage;&#10;    }&#10;&#10;    public void setFatPercentage(double fatPercentage) {&#10;        this.fatPercentage = fatPercentage;&#10;    }&#10;&#10;    public boolean isForKittens() {&#10;        return isForKittens;&#10;    }&#10;&#10;    public void setForKittens(boolean forKittens) {&#10;        isForKittens = forKittens;&#10;    }&#10;&#10;    @Override&#10;    public void description() {&#10;        System.out.println(&quot;*This is specialized cat food with &quot; + fishType + &quot; fish*&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;CatFood: &quot; + &quot;\n\n&quot; +&#10;                super.toString() +&#10;                &quot;fishType = &quot; + fishType + '\n' +&#10;                &quot;hasTaurine = &quot; + hasTaurine + '\n' +&#10;                &quot;fatPercentage = &quot; + fatPercentage + &quot;%\n&quot; +&#10;                &quot;isForKittens = &quot; + isForKittens + &quot;\n\n&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Model/Dog.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Model/Dog.java" />
              <option name="originalContent" value="package Model;&#10;&#10;public class Dog extends Animal{&#10;    private String breed;&#10;    private String size;&#10;    private double weight;&#10;&#10;    public Dog() {&#10;    }&#10;&#10;    public Dog(String name, int age, int healthLevel, int hungerLevel, int moodLevel, String favouriteFood,&#10;               String favouriteRecreationalActivity, String breed, String size) {&#10;        super(name, age, healthLevel, hungerLevel, moodLevel, favouriteFood, favouriteRecreationalActivity);&#10;        this.breed = breed;&#10;        this.size = size;&#10;        this.weight = 5.0;&#10;    }&#10;&#10;    public String getBreed() {&#10;        return breed;&#10;    }&#10;&#10;    public void setBreed(String breed) {&#10;        this.breed = breed;&#10;    }&#10;&#10;    public String getSize() {&#10;        return size;&#10;    }&#10;&#10;    public void setSize(String size) {&#10;        this.size = size;&#10;    }&#10;&#10;    public double getWeight() {&#10;        return weight;&#10;    }&#10;&#10;    public void setWeight(double weight) {&#10;        this.weight = weight;&#10;    }&#10;&#10;    @Override&#10;    public void sound() {&#10;        System.out.println(&quot;*Woof Woof*&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Dog:  &quot; + &quot;\n\n&quot; +&#10;                super.toString() +&#10;                &quot;breed  =  &quot; + breed + '\n' +&#10;                &quot;size  =  &quot; + size + '\n' +&#10;                &quot;weight  =  &quot; + String.format(&quot;%.1f&quot;, weight) + &quot; kg\n\n&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package Model;&#10;&#10;public class Dog extends Animal{&#10;    private String breed;&#10;    private String size;&#10;    private double weight;&#10;&#10;    public Dog() {&#10;    }&#10;&#10;    public Dog(String name, int age, int healthLevel, int hungerLevel, int moodLevel, String favouriteFood,&#10;               String favouriteRecreationalActivity, String breed, String size) {&#10;        super(name, age, healthLevel, hungerLevel, moodLevel, favouriteFood, favouriteRecreationalActivity);&#10;        this.breed = breed;&#10;        this.size = size;&#10;        this.weight = 5.0;&#10;    }&#10;&#10;    public String getBreed() {&#10;        return breed;&#10;    }&#10;&#10;    public void setBreed(String breed) {&#10;        this.breed = breed;&#10;    }&#10;&#10;    public String getSize() {&#10;        return size;&#10;    }&#10;&#10;    public void setSize(String size) {&#10;        this.size = size;&#10;    }&#10;&#10;    public double getWeight() {&#10;        return weight;&#10;    }&#10;&#10;    public void setWeight(double weight) {&#10;        this.weight = weight;&#10;    }&#10;&#10;    @Override&#10;    public void sound() {&#10;        System.out.println(&quot;*Woof Woof*&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Dog:  &quot; + &quot;\n\n&quot; +&#10;                super.toString() +&#10;                &quot;breed  =  &quot; + breed + '\n' +&#10;                &quot;size  =  &quot; + size + '\n' +&#10;                &quot;weight  =  &quot; + String.format(&quot;%.1f&quot;, weight) + &quot; kg\n\n&quot;;&#10;    }&#10;&#10;    public void feedWithFood(AnimalFood food) {&#10;        if (food == null || !food.isAvailableInStock()) {&#10;            return;&#10;        }&#10;&#10;        if (food instanceof WetFood) {&#10;            int newHungerLevel = Math.max(0, getHungerLevel() - 4);&#10;            setHungerLevel(newHungerLevel);&#10;&#10;            int newMoodLevel = Math.min(10, getMoodLevel() + 2);&#10;            setMoodLevel(newMoodLevel);&#10;&#10;            this.weight += 0.3;&#10;            setScareLevel(Math.max(0, getScareLevel() - 1));&#10;        } else if (food instanceof DogFood) {&#10;            DogFood dogFood = (DogFood) food;&#10;            int hungerReduction = dogFood.getCalories() / 100;&#10;            int newHungerLevel = Math.max(0, getHungerLevel() - hungerReduction);&#10;            setHungerLevel(newHungerLevel);&#10;&#10;            double weightGain = dogFood.getCalories() * 0.001;&#10;            this.weight += weightGain;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/Model/JuniorVeterinarian.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Model/JuniorVeterinarian.java" />
              <option name="originalContent" value="package Model;&#10;&#10;public class JuniorVeterinarian extends Veterinarian{&#10;    private String mentorName;&#10;&#10;    public JuniorVeterinarian() {&#10;    }&#10;&#10;    public JuniorVeterinarian(String name, String specialization, String mentorName) {&#10;        super(name, specialization);&#10;        this.mentorName = mentorName;&#10;    }&#10;&#10;    public String getMentorName() {&#10;        return mentorName;&#10;    }&#10;&#10;    public void setMentorName(String mentorName) {&#10;        this.mentorName = mentorName;&#10;    }&#10;&#10;&#10;    @Override&#10;    public void performCheckup() {&#10;        System.out.println(&quot;Assisting in checkup under the guidance of &quot; + mentorName + &quot;...&quot;);&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;JuniorVeterinarian:  &quot; + &quot;\n\n&quot; +&#10;                super.toString() +&#10;                &quot;mentorName  =  &quot; + mentorName + &quot;\n\n&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package Model;&#10;&#10;public class JuniorVeterinarian extends Veterinarian{&#10;    private String mentorName;&#10;&#10;    public JuniorVeterinarian() {&#10;    }&#10;&#10;    public JuniorVeterinarian(String name, String specialization, String mentorName) {&#10;        super(name, specialization);&#10;        this.mentorName = mentorName;&#10;    }&#10;&#10;    public String getMentorName() {&#10;        return mentorName;&#10;    }&#10;&#10;    public void setMentorName(String mentorName) {&#10;        this.mentorName = mentorName;&#10;    }&#10;&#10;&#10;    @Override&#10;    public void performCheckup() {&#10;        System.out.println(&quot;Assisting in checkup under the guidance of &quot; + mentorName + &quot;...&quot;);&#10;    }&#10;&#10;    public void comfortAnimal(Animal animal) {&#10;        if (animal == null) {&#10;            return;&#10;        }&#10;        &#10;        System.out.println(&quot;The kind assistant &quot; + getName() + &quot; is petting and comforting &quot; + animal.getName() + &quot; during treatment...&quot;);&#10;        &#10;        // Reduce scare level and slightly improve mood&#10;        animal.setScareLevel(Math.max(0, animal.getScareLevel() - 2));&#10;        animal.setMoodLevel(Math.min(10, animal.getMoodLevel() + 1));&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;JuniorVeterinarian:  &quot; + &quot;\n\n&quot; +&#10;                super.toString() +&#10;                &quot;mentorName  =  &quot; + mentorName + &quot;\n\n&quot;;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>